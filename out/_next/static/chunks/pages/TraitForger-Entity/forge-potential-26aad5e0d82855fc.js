(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[58],{35:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/TraitForger-Entity/forge-potential",function(){return t(6565)}])},6565:function(e,n,t){"use strict";t.r(n),t.d(n,{useTOC:function(){return o}});var i=t(5893),r=t(7812),a=t(7080);t(1392),t(237);var s=t(8925);function o(e){return[{value:"Can you gain forge Potential?",id:"can-you-gain-forge-potential",depth:3},{value:"entropy: 123456",id:"entropy-123456",depth:3},{value:"How does mergePotential affect gameplay?",id:"how-does-mergepotential-affect-gameplay",depth:3},{value:"Code and Functions",id:"code-and-functions",depth:2},{value:"1. Function _resetForgingCountIfNeeded (entityForging Contract)",id:"1-function-_resetforgingcountifneeded-entityforging-contract",depth:3},{value:"2. Function listForForging (entityForging Contract)",id:"2-function-listforforging-entityforging-contract",depth:3}]}n.default=(0,r.c)(function(e){let{toc:n=o(e)}=e,t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",span:"span",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{children:"Forge Potential"}),"\n",(0,i.jsx)(t.p,{children:"Forge Potential is an entities ability to forge and create new entities with players. The [5] digit in an entity’s entropy is it’s ability to forge based off of entropy. Each entity may have the ability to forge 0-9 times depending on its Forge Potential."}),"\n",(0,i.jsx)(t.h3,{id:n[0].id,children:n[0].value}),"\n",(0,i.jsx)(t.p,{children:"An Entities Forge Potential is determined by the [5] digit in entropy, when forging, this number is tracked by a mapping tallying of current forges specific to tokenIds with their entropy.\nOnce an Entity has used all of its Forge Potential it will return an error “ForgePotential limit reached, forge failed” for example. This is effectively rendering the Entity infertile for a period of time.\nTo regain the lost Forge Potential a player must simply wait 1 year. The game has a timestamp from mint that will reset the mapping count back to the [5] digit entropy number once 1 year has been passed in blocks. The function resposible for this is “_resetBreedingCountIfNeeded”."}),"\n",(0,i.jsx)(t.h3,{id:n[1].id,children:n[1].value}),"\n",(0,i.jsx)(t.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,i.jsxs)(t.code,{children:[(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy[1] = varOptions1"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy[2] = varOptions2"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy[3] = varOptions3 && colorOptions3"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy[4] = varOptions4 && colorOptions4"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy[5] = colorOptions5 && color2"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy[6] = colorOptions6 && color1"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy /40 = initalNukeFactor"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy % 10 = performanceFactor"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"Entropy % 3 ? 0 == Role"})})]})}),"\n",(0,i.jsx)(t.h3,{id:n[2].id,children:n[2].value}),"\n",(0,i.jsx)(t.p,{children:"Having a capped limit on forge potential allows for strategic gameplay. Encouraging players to forge their entities within a 1 year period to fully utilise their full potential. Allowing a reset of forge potential increases economic market flow and incentivises long term gameplay."}),"\n",(0,i.jsx)(t.h2,{id:n[3].id,children:n[3].value}),"\n",(0,i.jsx)(t.h3,{id:n[4].id,children:n[4].value}),"\n",(0,i.jsx)(t.p,{children:"Function _resetForgingCountIfNeeded checks if a year has passed since the last forging count reset for an Entity and, if so, recalculates the count based on the Entities entropy. The new count, termed forge potential, is derived by scaling the entropy and using its modulus. The breeding count is then updated to this value, and the reset timestamp is set to the current time, ensuring the breeding settings reflect the Entity’s unique characteristics annually."}),"\n",(0,i.jsx)(t.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,i.jsxs)(t.code,{children:[(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"  function _resetForgingCountIfNeeded(uint256 tokenId) private {"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    uint256 oneYear = oneYearInDays;"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    if (lastForgeResetTimestamp[tokenId] == 0) {"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      lastForgeResetTimestamp[tokenId] = block.timestamp;"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    } else if (block.timestamp >= lastForgeResetTimestamp[tokenId] + oneYear) {"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      forgingCounts[tokenId] = 0; // Reset to the forge potential"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      lastForgeResetTimestamp[tokenId] = block.timestamp;"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    }"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"  }"})})]})}),"\n",(0,i.jsx)(t.h3,{id:n[5].id,children:n[5].value}),"\n",(0,i.jsx)(t.p,{children:"The function listForForging checks if an Entity qualifies as a “forger” based on its entropy. It uses the condition that the entropy modulo 3 must be zero for the Entity to be listed for forging. Additionally, it ensures the token is not already listed for forging, verifies the caller’s ownership of the token, validates that the provided fee meets the minimum requirement, and resets the forging count if necessary. The function retrieves the token’s entropy, calculates its forge potential, and ensures the token has not exceeded its forging limit. If all conditions are met, it increments the listing count, stores the listing information, and emits an event indicating the token has been listed for forging. If any of these checks fail, the operation is blocked with an error message such as “Only forgers can list for forging.”"}),"\n",(0,i.jsx)(t.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,i.jsxs)(t.code,{children:[(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"   function listForForging("})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    uint256 tokenId,"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    uint256 fee"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"  ) public whenNotPaused nonReentrant {"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    Listing memory _listingInfo = listings[listedTokenIds[tokenId]];"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    require(!_listingInfo.isListed, 'Token is already listed for forging');"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    require("})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      nftContract.ownerOf(tokenId) == msg.sender,"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      'Caller must own the token'"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    );"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    require("})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      fee >= minimumListFee,"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      'Fee should be higher than minimum listing fee'"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    );"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    _resetForgingCountIfNeeded(tokenId);"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    uint256 entropy = nftContract.getTokenEntropy(tokenId); // Retrieve entropy for tokenId"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    uint8 forgePotential = uint8((entropy / 10) % 10); // Extract the 5th digit from the entropy"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    require("})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      forgePotential > 0 && forgingCounts[tokenId] <= forgePotential,"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"      'Entity has reached its forging limit'"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    );"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    bool isForger = (entropy % 3) == 0; // Determine if the token is a forger based on entropy"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    require(isForger, 'Only forgers can list for forging');"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    ++listingCount;"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    listings[listingCount] = Listing(msg.sender, tokenId, true, fee);"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    listedTokenIds[tokenId] = listingCount;"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"    emit ListedForForging(tokenId, fee);"})}),"\n",(0,i.jsx)(t.span,{children:(0,i.jsx)(t.span,{children:"  }"})})]})})]})},"/TraitForger-Entity/forge-potential",{filePath:"pages/TraitForger-Entity/forge-potential.mdx",timestamp:1728428966e3,pageMap:a.v,frontMatter:{title:"Forge Potential"},title:"Forge Potential"},"undefined"==typeof RemoteContent?o:RemoteContent.useTOC)},7080:function(e,n,t){"use strict";t.d(n,{v:function(){return i}});let i=[{data:{index:{title:"Introduction",order:1},"Game-Strategy":{title:"Game Strategy",order:2},GamePlay:{title:"Gameplay",order:3},"TraitForger-Entity":{title:"TraitForger Entity",order:4},FAQs:{title:"FAQs",order:5}}},{name:"FAQs",route:"/FAQs",frontMatter:{title:"FAQs"}},{name:"Game-Strategy",route:"/Game-Strategy",children:[{name:"active-trading-and-market-strategy",route:"/Game-Strategy/active-trading-and-market-strategy",frontMatter:{title:"Active Trading and Market Strategy"}},{name:"mint-and-nuke",route:"/Game-Strategy/mint-and-nuke",frontMatter:{title:"Mint and Nuke"}},{name:"strategic-long-term-forging",route:"/Game-Strategy/strategic-long-term-forging",frontMatter:{title:"Strategic Long-Term Forging"}},{name:"the-long-game-aging-and-maximizing-nuke-value",route:"/Game-Strategy/the-long-game-aging-and-maximizing-nuke-value",frontMatter:{title:"The Long Game Aging and Maximizing Nuke Value"}}]},{name:"GamePlay",route:"/GamePlay",children:[{name:"aging",route:"/GamePlay/aging",frontMatter:{title:"Aging"}},{name:"dao-fund",route:"/GamePlay/dao-fund",frontMatter:{title:"DAO Fund"}},{name:"economic-activity",route:"/GamePlay/economic-activity",frontMatter:{title:"Economic Activity"}},{name:"entropy",route:"/GamePlay/entropy",frontMatter:{title:"Entropy"}},{name:"forging",route:"/GamePlay/forging",frontMatter:{title:"Forging"}},{name:"generations-and-minting",route:"/GamePlay/generations-and-minting",frontMatter:{title:"Generations and Minting"}},{name:"nuke-fund",route:"/GamePlay/nuke-fund",frontMatter:{title:"Nuke Fund"}},{name:"trait-token-airdrop",route:"/GamePlay/trait-token-airdrop",frontMatter:{title:"$TRAIT Token Airdrop"}}]},{name:"index",route:"/",frontMatter:{title:"Introduction"}},{name:"TraitForger-Entity",route:"/TraitForger-Entity",children:[{name:"forge-potential",route:"/TraitForger-Entity/forge-potential",frontMatter:{title:"Forge Potential"}},{name:"nuke-factor",route:"/TraitForger-Entity/nuke-factor",frontMatter:{title:"Nuke Factor"}},{name:"performance-factor",route:"/TraitForger-Entity/performance-factor",frontMatter:{title:"Performance Factor"}},{name:"role",route:"/TraitForger-Entity/role",frontMatter:{title:"Role"}},{name:"traits",route:"/TraitForger-Entity/traits",frontMatter:{title:"Traits"}},{name:"visuals",route:"/TraitForger-Entity/visuals",frontMatter:{title:"Visuals"}}]}]}},function(e){e.O(0,[83,888,774,179],function(){return e(e.s=35)}),_N_E=e.O()}]);